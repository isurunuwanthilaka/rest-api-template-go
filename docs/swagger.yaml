basePath: /api/v1
definitions:
  dto.AuthorResDto:
    properties:
      age:
        type: integer
      gender:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
  dto.BookResDto:
    properties:
      author:
        type: string
      genre:
        type: string
      id:
        type: integer
      summary:
        type: string
      title:
        type: string
    type: object
  errors.RestError:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /authors:
    get:
      consumes:
      - application/json
      description: This will return list of authors in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.AuthorResDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.RestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.RestError'
      summary: Show all authors
      tags:
      - authors
  /books:
    get:
      consumes:
      - application/json
      description: This will return list of books in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.BookResDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestError'
      summary: Show all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: This will add a book to the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BookResDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestError'
      summary: Add a book
      tags:
      - books
  /books/:id:
    delete:
      consumes:
      - application/json
      description: This will soft delete a book in the system given the book id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestError'
      summary: Delete a book by id
      tags:
      - books
    post:
      consumes:
      - application/json
      description: This will return a book in the system given the book id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BookResDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestError'
      summary: Get a book by id
      tags:
      - books
    put:
      consumes:
      - application/json
      description: This will update a book in the system given the book id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BookResDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestError'
      summary: Update a book by id
      tags:
      - books
swagger: "2.0"
